Shift F12 找到关键函数。直接 F5。

int sub_401000()
{
  signed int LEN; // ecx@1
  signed int i; // esi@2
  signed int j; // eax@4
  signed int k; // eax@6
  int result; // eax@10
  char PFX[29]; // [sp+4h] [bp-80h]@1
  char CMP[29]; // [sp+24h] [bp-60h]@1
  char y[32]; // [sp+44h] [bp-40h]@3
  char input[32]; // [sp+64h] [bp-20h]@1

  CMP[20] = 80;
  CMP[22] = 80;
  PFX[6] = 64;
  PFX[24] = 64;
  PFX[27] = 64;
  PFX[3] = 8;
  PFX[5] = 8;
  PFX[28] = 8;
  CMP[0] = 83;
  CMP[1] = -106;
  CMP[2] = -37;
  CMP[3] = 29;
  CMP[4] = -86;
  CMP[5] = -42;
  CMP[6] = -44;
  CMP[7] = 72;
  CMP[8] = -72;
  CMP[9] = 21;
  CMP[10] = -2;
  CMP[11] = -123;
  CMP[12] = 120;
  CMP[13] = -119;
  CMP[14] = 101;
  CMP[15] = -46;
  CMP[16] = -74;
  CMP[17] = 18;
  CMP[18] = -5;
  CMP[19] = 9;
  CMP[21] = -73;
  CMP[23] = -124;
  CMP[24] = 93;
  CMP[25] = 57;
  CMP[26] = -126;
  CMP[27] = -103;
  CMP[28] = 87;
  PFX[0] = 70;
  PFX[1] = 66;
  PFX[2] = 11;
  PFX[4] = 59;
  PFX[7] = 17;
  PFX[8] = 37;
  PFX[9] = 76;
  PFX[10] = 98;
  PFX[11] = 89;
  PFX[12] = 33;
  PFX[13] = 94;
  PFX[14] = 41;
  PFX[15] = 14;
  PFX[16] = 97;
  PFX[17] = 72;
  PFX[18] = 96;
  PFX[19] = 20;
  PFX[20] = 9;
  PFX[21] = 43;
  PFX[22] = 9;
  PFX[23] = 88;
  PFX[25] = 99;
  PFX[26] = 25;
  scanf((int)&dword_416D00, input, 30, 10u);
  LEN = strlen(input);
  if ( LEN < 29 )
    goto err;
  for ( i = 0; i < LEN; ++i )
    y[i] = (input[i] >> 2) + ((input[i] & 3) << 6);
  for ( j = 0; j < LEN; ++j )
    y[j] ^= PFX[j];
  for ( k = 0; k < LEN; ++k )
  {
    if ( y[k] != CMP[k] )
      break;
  }
  if ( k != LEN )
  {
err:
    sub_4048CA(aSorryYouAreWro);
    result = 0;
  }
  else
  {
    sub_4048CA(aCorrectTheFlag, input);
    result = 0;
  }
  return result;
}

只是把输入做了一些比特层面的小技巧，然后就是 xor 了。

take it easy, 直接 Ctrl C + Ctrl V IDA 的伪代码，然后胡搞即可。

#include <stdio.h>

int main(int argc, char *argv[]) {
  const int L = 29;
  char CMP[L];
  char PFX[L];

  CMP[20] = 80;
  CMP[22] = 80;
  PFX[6] = 64;
  PFX[24] = 64;
  PFX[27] = 64;
  PFX[3] = 8;
  PFX[5] = 8;
  PFX[28] = 8;
  CMP[0] = 83;
  CMP[1] = -106;
  CMP[2] = -37;
  CMP[3] = 29;
  CMP[4] = -86;
  CMP[5] = -42;
  CMP[6] = -44;
  CMP[7] = 72;
  CMP[8] = -72;
  CMP[9] = 21;
  CMP[10] = -2;
  CMP[11] = -123;
  CMP[12] = 120;
  CMP[13] = -119;
  CMP[14] = 101;
  CMP[15] = -46;
  CMP[16] = -74;
  CMP[17] = 18;
  CMP[18] = -5;
  CMP[19] = 9;
  CMP[21] = -73;
  CMP[23] = -124;
  CMP[24] = 93;
  CMP[25] = 57;
  CMP[26] = -126;
  CMP[27] = -103;
  CMP[28] = 87;
  PFX[0] = 70;
  PFX[1] = 66;
  PFX[2] = 11;
  PFX[4] = 59;
  PFX[7] = 17;
  PFX[8] = 37;
  PFX[9] = 76;
  PFX[10] = 98;
  PFX[11] = 89;
  PFX[12] = 33;
  PFX[13] = 94;
  PFX[14] = 41;
  PFX[15] = 14;
  PFX[16] = 97;
  PFX[17] = 72;
  PFX[18] = 96;
  PFX[19] = 20;
  PFX[20] = 9;
  PFX[21] = 43;
  PFX[22] = 9;
  PFX[23] = 88;
  PFX[25] = 99;
  PFX[26] = 25;

  for (int i = 0; i < L; ++i) {
    unsigned char c = CMP[i] ^ PFX[i];
    printf("%c", (c << 2) + (c >> 6));
  }
  return 0;
}
